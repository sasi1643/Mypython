import numpy as np
import pandas as pd
import matplotlib.pylab as plt
from	sklearn.cluster	import	KMeans
from scipy.spatial.distance import cdist 

# Generating random uniform numbers 
X = np.random.uniform(0,1,1000)
Y = np.random.uniform(0,1,1000)
df_xy =pd.DataFrame(columns=["X","Y"])
df_xy.X = X
df_xy.Y = Y
df_xy.plot(x="X",y = "Y",kind="scatter")
############ K-Mean
model1 = KMeans(n_clusters=5).fit(df_xy)
model1.labels_
model1.cluster_centers_
df_xy.plot(x="X",y = "Y",c=model1.labels_,kind="scatter",s=10,cmap=plt.cm.coolwarm)
## s is dot size, 
model1.labels_ # getting the labels of clusters assigned to each row 
ran=pd.Series(model1.labels_)  # converting numpy array into pandas series object 
df_xy['clust']=ran # creating a  new column and assigning it to new column 

df_xy = df_xy.iloc[:,[2,0,1]] #shifting columns
df_xy.iloc[:,:].groupby(df_xy.clust).mean()

###############################################################################
#universities data set

Univ= pd.read_csv("C:/Users/Sasi Kanth/Desktop/Data/ExcelR Datasets/Universities.csv")
# Normalization function 
def norm_func(i):
    x = (i-i.min())/(i.max()-i.min())
    return (x)
########################
    
df_norm = norm_func(Univ.iloc[:,1:])

###### screw plot or elbow curve ############
k = list(range(2,15))
TWSS = [] # variable for storing total within sum of squares for each kmeans 
for i in k:
    kmeans = KMeans(n_clusters = i)
    kmeans.fit(df_norm)
    WSS = [] # variable for storing within sum of squares for each cluster 
    for j in range(i):
        WSS.append(sum(cdist(df_norm.iloc[kmeans.labels_==j,:],kmeans.cluster_centers_[j].reshape(1,df_norm.shape[1]),"euclidean")))
    TWSS.append(sum(WSS))
    
plt.plot(k,TWSS, 'go-');plt.xlabel("No_of_Clusters");plt.ylabel("total_within_SS");plt.xticks(k)
help(plt.plot)

# Selecting 5 clusters from the above scree plot which is the optimum number of clusters 
model=KMeans(n_clusters=5) 
model.fit(df_norm)
model.labels_ # getting the labels of clusters assigned to each row 
md=pd.Series(model.labels_)  # converting numpy array into pandas series object 
Univ['clust']=md # creating a  new column and assigning it to new column 
Univ = Univ.iloc[:,[7,0,1,2,3,4,5,6]]

Univ.iloc[:,1:7].groupby(Univ.clust).mean()

